(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["ICFP09`",{"JLink`"}]
\[ScriptCapitalR]::usage="Radius der Erde";
\[ScriptCapitalG]::usage="Gravitationskonstante.";
\[ScriptCapitalM]::usage="Masse der Erde";
Simulator::usage="Simulator[{x0,v0},te,controlFunk] simuliert mit {{x1,x2},{vx1,vx2}} genau te Schritte und wendet die controlFunk bei jedem Schriff auf {x1t,x2t} an. Diese muss dann {dvx,dvy} liefern.";
InitJavaVM::usage="InitJavaVM[pathToOrbitJar] initializes the OrbitVM. Must be called first!";
VMInit::usage="VMInit[{vx_,vy_},problemFile_String] starts the OrbitVM with initial dvx and dvy.";
VMStep::usage="VMStep[{{addr1,addr2,...},{value1,value2,...}}] makes one step. For zero input just give {{},{}} as argument.";


Begin["Private`"]
\[ScriptCapitalG]=6.67428*10^(-11);
\[ScriptCapitalM]=6.0*10^24;
\[ScriptCapitalR]=6.357*10^6;

dt=1.0;
Simulator[{x0_,v0_},te_Integer,controlFunc_]:=
Module[{iterFunc},
iterFunc[{st_,vt_}]:=With[{gt=-\[ScriptCapitalG]*\[ScriptCapitalM]/Norm[st]^2*st/Norm[st],
dv=controlFunc[st]},
Block[{stt=st+(vt*dt)+1/2*(gt+dv)*dt^2,gtt},
gtt=-\[ScriptCapitalG]*\[ScriptCapitalM]/Norm[stt]^2*stt/Norm[stt];
{stt,vt+(dv+(gt+gtt)/2)*dt
}]];
NestList[iterFunc,{x0,v0},te]
];

InitJavaVM[orbitJar_String]:=Block[{},
ReinstallJava[];
AddToClassPath[orbitJar];
vmClass=LoadJavaClass["de.hronopik.icfp2009.vm.DirectVm"];
converter=LoadJavaClass["de.hronopik.icfp2009.util.MathematicaConverter"];
];



VMInit[{vx_,vy_},problemFile_String]:=Block[{in,out},
vm=JavaNew[vmClass,problemFile];
in=MathematicaConverter`toMap[{2,3,16000},{vx,vy,1001.0}];
out=vm@step[in];
MathematicaConverter`fromMap[out]
];
VMStep[input_]:=Block[{in,out},
in=MathematicaConverter`toMap[Sequence@@input];
out=vm@step[in];
MathematicaConverter`fromMap[out]
];

End[]
EndPackage[]
